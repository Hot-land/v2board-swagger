---
swagger: "2.0"
info:
  description: "v2board的API说明书"
  version: "1.0.5"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "hotland.bot@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "v2board.com"
basePath: "/api/v1"
tags:
- name: client
  description: 客户端专用的API，使用client中间件
- name: guest
  description: 游客用API
- name: passport
  description: 认证相关的API
- name: user
  description: 用户相关API
schemes:
- "https"
- "http"
paths:
  /passport/auth/register:
    post:
      tags:
      - "passport"
      summary: 注册
      parameters:
      - in: formData
        name: email
        type: string
        description: 电子邮件地址
        required: true
        format: "email"
      - in: formData
        name: password
        type: string
        description: 注册密码
        required: true
      - in: formData
        name: invite_code
        type: string
        description: 邀请码
        required: false
      - in: formData
        name: email_code
        type: string
        description: 邮件验证码，当服务端开启邮件验证的时候必须
        required: false
      - in: formData
        name: recaptcha_data
        type: string
        description: reCAPTCHA的密钥，当服务端开启reCAPTCHA验证的时候必须
        required: false
      responses:
        200:
          description: 成功注册
          schema:
            $ref: "#/definitions/RegisterResponse"
        500:
          description: 注册失败，有各种情况
  
  /passport/auth/login:
    post:
      tags:
      - passport
      summary: 登录
      parameters:
      - in: formData
        name: email
        type: string
        description: 电子邮件地址
        required: true
        format: email
      - in: formData
        name: password
        type: string
        description: 注册密码
        required: true    
      responses:
        200:
          description: 登录注册
          schema:
            $ref: "#/definitions/RegisterResponse"

  /passport/auth/check:
    get:
      tags:
      - "passport"
      summary: 获取登录用户状态
      responses:
        200:
          description: 成功获取登录用户状态
          schema:
            $ref: "#/definitions/AuthCheckResponse"
  
  /passport/auth/forget:
    post:
      tags:
      - passport
      summary: 重置密码
      parameters:
      - in: formData
        name: email
        type: string
        description: 电子邮件地址
        required: true
        format: email
      - in: formData
        name: email_code
        type: string
        description: 电子邮件验证码
        required: true
      - in: formData
        name: password
        type: string
        description: 新密码
        required: true
      responses:
        200: 
          description: 成功重置密码
        500:
          description: 重置密码失败
  
  /passport/auth/getTempToken:
    post:
      tags:
      - passport
      summary: 获取临时token
      responses:
        200:
          description: 成功获取临时token
          schema:
            $ref: "#/definitions/GetTempTokenResponse"
  
  /passport/common/config:
    get:
      tags:
      - passport
      summary: 获取站点配置
      responses:
        200:
          description: 成功获取站点的配置
          schema:
            $ref: "#/definitions/LegacyGetCommonConfigResponse"
      deprecated: true
        
  /passport/common/sendEmailVerify:
    post:
      tags:
      - passport
      summary: 给指定邮箱发送验证邮件
      parameters:
      - in: formData
        name: email
        type: string
        description: 电子邮件地址
        required: true
        format: email
      - in: formData
        name: recaptcha_data
        type: string
        description: reCAPTCHA密钥，如果服务端开启了reCAPTCHA的话则必须
        required: false
      responses:
        200:
          description: 成功发送验证码
          schema:
            $ref: "#/definitions/SendEmailVerifyResponse"
  
  /guest/plan/fetch:
    get:
      tags:
      - guest
      summary: 获取可以公开显示的订阅列表
      responses:
        200:
          description: 成功获取可以公开显示的订阅列表
          schema:
            $ref: "#/definitions/FetchGuestPlanResponse"

  /guest/common/config:
    get:
      tags:
      - guest
      summary: 获取站点配置，在服务端版本v1.5.5之后推荐使用这个API
      responses:
        200:
          description: 成功获取站点的配置
          schema:
            $ref: "#/definitions/GetCommonConfigResponse"

securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "https://petstore.swagger.io/oauth/authorize"
    flow: "implicit"
    scopes:
      read:pets: "read your pets"
      write:pets: "modify pets in your account"
definitions:
  RegisterResponse:
    type: object
    properties:
      data: 
        type: object
        properties:
          token:
            type: string
          auth_data:
            type: string
            description: base64编码
  AuthCheckResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          is_login:
            type: boolean
            description: 是否登录
          is_admin:
            type: boolean
            description: 是否管理员
  GetTempTokenResponse:
    type: object
    properties:
      data: 
        type: string
        description: token
  GetCommonConfigResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          tos_url:
            type: string
            description: 服务条款URL
          is_email_verify:
            type: integer
            description: 是否开启邮箱验证，0 表示 false
          is_invite_force:
            type: integer
            description: 是否开启强制邀请，0 表示 false
          email_whitelist_suffix:
            type: array
            description: 邮箱后缀名白名单，例如["gmail.com","qq.com","163.com"]
          is_recaptcha:
            type: integer
            description: 是否开启reCAPTCHA，0 表示 false
          recaptcha_site_key:
            type: string
            description: reCAPTCHA密钥
          app_description:
            type: string 
            description: 站点描述
          app_url:
            type: string
            description: 站点URL
          logo:
            type: string
            description: 站点logo的URL
  LegacyGetCommonConfigResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          isEmailVerify:
            type: integer
            description: 是否开启邮箱验证，0 表示 false
          isInviteForce:
            type: integer
            description: 是否开启强制邀请，0 表示 false
          emailWhitelistSuffix:
            type: array
            description: 邮箱后缀名白名单，例如["gmail.com","qq.com","163.com"]
          isRecaptcha:
            type: integer
            description: 是否开启reCAPTCHA，0 表示 false
          recaptchaSiteKey:
            type: string
            description: reCAPTCHA密钥
          appDescription:
            type: string 
            description: 站点描述
          appUrl:
            type: string
            description: 站点URL
  SendEmailVerifyResponse:
    type: object
    properties:
      data:
        type: boolean
        description: 是否成功
  FetchGuestPlanResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Plan"
  Plan:
    type: object
    properties:
      id:
        type: integer
        description: plan id
      group_id:
        type: integer
        description: group id
      transfer_enable:
        type: integer
        description: 1,
      name:
        type: string
        description: 订阅的名字
      show:
        type: integer
        description: 是否显示，1的话显示
      sort:
        type: integer
        description: 显示顺序
      renew:
        type: integer
        description: 是否可以重置，0表示否
      content:
        type: string
        description: 订阅的描述，可以是html格式
      month_price:
        type: integer
        description: 月费价格，如果不支持月费则为null
      quarter_price:
        type: integer
        description: 季费价格，如果不支持季费则为null
      half_year_price:
        type: integer
        description: 半年价格，如果不支持半年的订阅则为null
      year_price:
        type: integer
        description: 年费价格，如果不支持年费的订阅则为null
      two_year_price:
        type: integer
        description: 两年的价格，如果不支持两年的订阅则为null
      three_year_price:
        type: integer
        description: 三年的价格，如果不支持三年的订阅则为null
      onetime_price:
        type: integer
        description: 一次性付款价格，如果不支持一次性付款则为null
      reset_price:
        type: integer
        description: 重置价格，如果不支持重置则为null
      reset_traffic_method:
        type: integer
        enum: [0, 1, 2, 3, 4]
        description: >
          * 0 - 每个月的第一天重置
          * 1 - 每个月重置
          * 2 - 不重置
          * 3 - 每年的第一天重置
          * 4 - 每年重置
      created_at:
        type: integer
        description: 创建时间
      updated_at:
        type: integer
        description: 更新时间
        